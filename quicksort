fun partition(int arr, int start, int end){
    int pivot = arr[start];
	int count = 0;
    int ind = start+1;
    while(ind <= end){
        if(arr[ind] <= pivot){
            count=count+1;
        }
        ind = ind+1;
    }
    int pivotIndex = start + count;
    int dummy = arr[pivotIndex];
    arr[pivotIndex] = arr[start];
    arr[start] = dummy;
	int i = start;
    int j = end;
    while((i < pivotIndex) and (j > pivotIndex)){
		while(arr[i] <= pivot){
			i=i+1;
		}
		while(arr[j] > pivot){
			j=j-1;
		}
		if((i < pivotIndex) and (j > pivotIndex)){
            int temp = arr[i];
            arr[i] = arr[j];
            arr[j] = temp;
            i=i+1;
            j=j-1;
		}
	}
	return pivotIndex;
}
fun quickSort(int arr, int start, int end){
    if(start < end){
        int p = partition(arr, start, end);
        quickSort(arr,start,p-1);
        quickSort(arr,p+1,end);
    }
}
int arr[6];
arr[0]=9;
arr[1]=3;
arr[2]=4;
arr[3]=2;
arr[4]=1;
arr[5]=8;
int n = 6;
quickSort(arr, 0, n - 1);
int i=0;
while(i < n){
    cout<<arr[i];
    cout<<" ";
    i=i+1;
}
